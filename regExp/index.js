//断言：表示一个匹配在某些条件下发生
//^sa：字符串要以sa开头
//sa$：字符串要以sa结尾
//*：匹配前一个表达式0次或多次，等价于{0,}
//+：匹配前一个表达式1次或多次，等价于{1,}
//?：匹配前一个表达式0次或1次，等价于{0,1}，如果跟在量词*，+，？，{}后面，变成非贪婪模式（尽量匹配少的字符）
//.：默认匹配换行符之外的任何单个字符
//x|y：匹配x或者y
//{n}:n一个正整数，匹配前一个字符出现了n次
//{n,}:n一个正整数，匹配前一个字符至少出现了n次
//{n,m}:n,m一个正整数，匹配前一个字符至少出现了n次，最多出现了m次，如果都是0则被忽略
//[xyz]：匹配方括号中的任意字符
//[^zyx]：反向字符集
//\b：一个词的边界(开始和结束)
//\cX：
//\d：匹配一个数字，等价于[0-9]
//\D：匹配一个非数组字符，等价于[^0-9]
//\f：换页符
//\n：换行符
//\r：回车符
//\s：匹配空白字符，包括空格、制表符、换行符、换页符
//\S：匹配一个非空白字符
//\t：匹配一个水平制表符
//\v：匹配一个垂直制表符
//\w：匹配一个单字字符，等价于[a-zA-Z0-9]
//\W：匹配一个非单字字符，等价于[^a-zA-Z0-9]
//\0：匹配null


// const regExp =/b4*?/g
// console.log('sale/shoop/2ea833e70b3b4421bf13671a36160616.html'.match(regExp))

// const regExp =/.n/g
// console.log('nay, an apple is on the tree'.match(regExp))

//TODO
// const regExp = /[a-z.]+/g
// console.log('a.bcdef.g'.match(regExp))

const regExp =/^\w+([-+.]+\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/
console.log(regExp.test('1512+3-+6.06736@qq.com'))

